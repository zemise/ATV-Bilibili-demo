// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum DmColorfulType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// 无
    case noneType // = 0

    /// 渐变色
    case vipGradualColor // = 60001
    case UNRECOGNIZED(Int)

    init() {
        self = .noneType
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .noneType
        case 60001: self = .vipGradualColor
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .noneType: return 0
        case .vipGradualColor: return 60001
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension DmColorfulType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [DmColorfulType] = [
            .noneType,
            .vipGradualColor,
        ]
    }

#endif // swift(>=4.2)

/// 弹幕条目
struct DanmakuElem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 弹幕dmid
    var id: Int64 = 0

    /// 弹幕出现位置(单位ms)
    var progress: Int32 = 0

    /// 弹幕类型 1/2/3:普通弹幕 4:底部弹幕 5:顶部弹幕 6:逆向弹幕 7:高级弹幕 8:代码弹幕 9:BAS弹幕(pool必须为2)
    var mode: Int32 = 0

    /// 弹幕字号
    var fontsize: Int32 = 0

    /// 弹幕颜色
    var color: UInt32 = 0

    /// 发送者mid hash
    var midHash: String = .init()

    /// 弹幕正文
    var content: String = .init()

    /// 发送时间
    var ctime: Int64 = 0

    /// 权重 用于屏蔽等级 区间:[1,10]
    var weight: Int32 = 0

    /// 动作
    var action: String = .init()

    /// 弹幕池 0:普通池 1:字幕池 2:特殊池(代码/BAS弹幕)
    var pool: Int32 = 0

    /// 弹幕dmid str
    var idStr: String = .init()

    /// 弹幕属性位(bin求AND) bit0:保护 bit1:直播 bit2:高赞
    var attr: Int32 = 0

    var animation: String = .init()

    /// 大会员专属颜色
    var colorful: DmColorfulType = .noneType

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// 弹幕ai云屏蔽列表
struct DanmakuAIFlag {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 弹幕ai云屏蔽条目
    var dmFlags: [DanmakuAIFlag.DanmakuFlag] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct DanmakuFlag {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// 弹幕id
        var dmid: Int64 = 0

        /// 评分
        var flag: UInt32 = 0

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
    }

    init() {}
}

struct DmColorful {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 颜色类型
    var type: DmColorfulType = .noneType

    var src: String = .init()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// 获取弹幕-响应
struct DmSegMobileReply {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 弹幕列表
    var elems: [DanmakuElem] = []

    /// 是否已关闭弹幕 0:未关闭 1:已关闭
    var state: Int32 = 0

    /// 弹幕云屏蔽ai评分值
    var aiFlag: DanmakuAIFlag {
        get { return _aiFlag ?? DanmakuAIFlag() }
        set { _aiFlag = newValue }
    }

    /// Returns true if `aiFlag` has been explicitly set.
    var hasAiFlag: Bool { return _aiFlag != nil }
    /// Clears the value of `aiFlag`. Subsequent reads from it will return its default value.
    mutating func clearAiFlag() { _aiFlag = nil }

    var colorfulSrc: [DmColorful] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _aiFlag: DanmakuAIFlag?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension DmColorfulType: @unchecked Sendable {}
    extension DanmakuElem: @unchecked Sendable {}
    extension DanmakuAIFlag: @unchecked Sendable {}
    extension DanmakuAIFlag.DanmakuFlag: @unchecked Sendable {}
    extension DmColorful: @unchecked Sendable {}
    extension DmSegMobileReply: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DmColorfulType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "NoneType"),
        60001: .same(proto: "VipGradualColor"),
    ]
}

extension DanmakuElem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DanmakuElem"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "progress"),
        3: .same(proto: "mode"),
        4: .same(proto: "fontsize"),
        5: .same(proto: "color"),
        6: .same(proto: "midHash"),
        7: .same(proto: "content"),
        8: .same(proto: "ctime"),
        9: .same(proto: "weight"),
        10: .same(proto: "action"),
        11: .same(proto: "pool"),
        12: .same(proto: "idStr"),
        13: .same(proto: "attr"),
        22: .same(proto: "animation"),
        24: .same(proto: "colorful"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &id)
            case 2: try decoder.decodeSingularInt32Field(value: &progress)
            case 3: try decoder.decodeSingularInt32Field(value: &mode)
            case 4: try decoder.decodeSingularInt32Field(value: &fontsize)
            case 5: try decoder.decodeSingularUInt32Field(value: &color)
            case 6: try decoder.decodeSingularStringField(value: &midHash)
            case 7: try decoder.decodeSingularStringField(value: &content)
            case 8: try decoder.decodeSingularInt64Field(value: &ctime)
            case 9: try decoder.decodeSingularInt32Field(value: &weight)
            case 10: try decoder.decodeSingularStringField(value: &action)
            case 11: try decoder.decodeSingularInt32Field(value: &pool)
            case 12: try decoder.decodeSingularStringField(value: &idStr)
            case 13: try decoder.decodeSingularInt32Field(value: &attr)
            case 22: try decoder.decodeSingularStringField(value: &animation)
            case 24: try decoder.decodeSingularEnumField(value: &colorful)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if id != 0 {
            try visitor.visitSingularInt64Field(value: id, fieldNumber: 1)
        }
        if progress != 0 {
            try visitor.visitSingularInt32Field(value: progress, fieldNumber: 2)
        }
        if mode != 0 {
            try visitor.visitSingularInt32Field(value: mode, fieldNumber: 3)
        }
        if fontsize != 0 {
            try visitor.visitSingularInt32Field(value: fontsize, fieldNumber: 4)
        }
        if color != 0 {
            try visitor.visitSingularUInt32Field(value: color, fieldNumber: 5)
        }
        if !midHash.isEmpty {
            try visitor.visitSingularStringField(value: midHash, fieldNumber: 6)
        }
        if !content.isEmpty {
            try visitor.visitSingularStringField(value: content, fieldNumber: 7)
        }
        if ctime != 0 {
            try visitor.visitSingularInt64Field(value: ctime, fieldNumber: 8)
        }
        if weight != 0 {
            try visitor.visitSingularInt32Field(value: weight, fieldNumber: 9)
        }
        if !action.isEmpty {
            try visitor.visitSingularStringField(value: action, fieldNumber: 10)
        }
        if pool != 0 {
            try visitor.visitSingularInt32Field(value: pool, fieldNumber: 11)
        }
        if !idStr.isEmpty {
            try visitor.visitSingularStringField(value: idStr, fieldNumber: 12)
        }
        if attr != 0 {
            try visitor.visitSingularInt32Field(value: attr, fieldNumber: 13)
        }
        if !animation.isEmpty {
            try visitor.visitSingularStringField(value: animation, fieldNumber: 22)
        }
        if colorful != .noneType {
            try visitor.visitSingularEnumField(value: colorful, fieldNumber: 24)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DanmakuElem, rhs: DanmakuElem) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.progress != rhs.progress { return false }
        if lhs.mode != rhs.mode { return false }
        if lhs.fontsize != rhs.fontsize { return false }
        if lhs.color != rhs.color { return false }
        if lhs.midHash != rhs.midHash { return false }
        if lhs.content != rhs.content { return false }
        if lhs.ctime != rhs.ctime { return false }
        if lhs.weight != rhs.weight { return false }
        if lhs.action != rhs.action { return false }
        if lhs.pool != rhs.pool { return false }
        if lhs.idStr != rhs.idStr { return false }
        if lhs.attr != rhs.attr { return false }
        if lhs.animation != rhs.animation { return false }
        if lhs.colorful != rhs.colorful { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DanmakuAIFlag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DanmakuAIFlag"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "dmFlags"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &dmFlags)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !dmFlags.isEmpty {
            try visitor.visitRepeatedMessageField(value: dmFlags, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DanmakuAIFlag, rhs: DanmakuAIFlag) -> Bool {
        if lhs.dmFlags != rhs.dmFlags { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DanmakuAIFlag.DanmakuFlag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = DanmakuAIFlag.protoMessageName + ".DanmakuFlag"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "dmid"),
        2: .same(proto: "flag"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &dmid)
            case 2: try decoder.decodeSingularUInt32Field(value: &flag)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if dmid != 0 {
            try visitor.visitSingularInt64Field(value: dmid, fieldNumber: 1)
        }
        if flag != 0 {
            try visitor.visitSingularUInt32Field(value: flag, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DanmakuAIFlag.DanmakuFlag, rhs: DanmakuAIFlag.DanmakuFlag) -> Bool {
        if lhs.dmid != rhs.dmid { return false }
        if lhs.flag != rhs.flag { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DmColorful: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DmColorful"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "src"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &type)
            case 2: try decoder.decodeSingularStringField(value: &src)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if type != .noneType {
            try visitor.visitSingularEnumField(value: type, fieldNumber: 1)
        }
        if !src.isEmpty {
            try visitor.visitSingularStringField(value: src, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DmColorful, rhs: DmColorful) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.src != rhs.src { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DmSegMobileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DmSegMobileReply"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "elems"),
        2: .same(proto: "state"),
        3: .same(proto: "aiFlag"),
        5: .same(proto: "colorfulSrc"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &elems)
            case 2: try decoder.decodeSingularInt32Field(value: &state)
            case 3: try decoder.decodeSingularMessageField(value: &_aiFlag)
            case 5: try decoder.decodeRepeatedMessageField(value: &colorfulSrc)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !elems.isEmpty {
            try visitor.visitRepeatedMessageField(value: elems, fieldNumber: 1)
        }
        if state != 0 {
            try visitor.visitSingularInt32Field(value: state, fieldNumber: 2)
        }
        try { if let v = self._aiFlag {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        if !colorfulSrc.isEmpty {
            try visitor.visitRepeatedMessageField(value: colorfulSrc, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DmSegMobileReply, rhs: DmSegMobileReply) -> Bool {
        if lhs.elems != rhs.elems { return false }
        if lhs.state != rhs.state { return false }
        if lhs._aiFlag != rhs._aiFlag { return false }
        if lhs.colorfulSrc != rhs.colorfulSrc { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
